const { Scenes } = require("telegraf");
const kb = require("../../../keyboars.json");
const utils = require("../../../utils");

const back = async (ctx, edit = true) => {
  try {
    await ctx.scene.leave();
    const user = await utils.getUserData(ctx.from.id);
    let txt = `${user.nickname}, –≤–æ—Ç, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å:\n\n`;
    txt += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.coins} üí∞\n`;
    txt += `–¢–≤–æ–∏ –±—Ä–æ—Å–∫–∏: ${user.rolls} üé≤\n`;

    try {
      await ctx[edit ? "editMessageText" : "reply"](txt, kb.profile_menu);
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  } catch (e) {
    console.log(e);
  }
};

const wizard_scenes = new Scenes.WizardScene(
  "promocodes",
  async (ctx) => {
    try {
      let txt = "–£ —Ç–µ–±—è –µ—Å—Ç—å üåü –ü—Ä–æ–º–æ–∫–æ–¥ ?\n";
      txt += "–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Å—é–¥–∞, –∞ –º—ã –Ω–∞—á–∏—Å–ª–∏–º –Ω–∞–≥—Ä–∞–¥—É!";

      const mes = await ctx.editMessageText(txt, kb.promocodes_start);
      ctx.wizard.state.mid = mes.message_id;
      return ctx.wizard.next();
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  },

  async (ctx) => {
    try {
      const user = await utils.getUserData(ctx.from.id);

      if (ctx.message) {
        await ctx.deleteMessage(ctx.wizard.state.mid);
        const promo_name = ctx.message.text.toLowerCase();
        const promo = await utils.getPromocode(promo_name);

        if (!promo || promo.activations <= 0) {
          const txt = promo
            ? "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è :(\n–°–æ–≤–µ—Ç—É–µ–º –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ @genshinnothing, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!"
            : "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...\n–°–æ–≤–µ—Ç—É–µ–º –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ @genshinnothing, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!";

          await ctx.reply(txt, kb.promocodes_start);
          return ctx.wizard.next();
        }

        if (await utils.findPromocodeUses(ctx.from.id, promo_name)) {
          const txt =
            "–¢—ã —É–∂–µ –≤–≤–æ–¥–∏–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!\n–°–æ–≤–µ—Ç—É–µ–º –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ @genshinnothing, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!";
          await ctx.reply(txt, kb.promocodes_start);
          return ctx.wizard.next();
        }

        await utils.decreasePromoActivations(promo_name);
        await utils.updateUserData(ctx.from.id,promo.type,user[promo.type] + promo.count);
        await utils.addUserPromoUse(ctx.from.id, promo_name);

        if (promo.type === "vip_status") {
          const rollsToAdd =
            promo.count >= 7 ? parseInt(process.env.ROLLS_ON_SUB) - 1 : 0;
          const coinsToAdd =
            promo.count >= 7
              ? parseInt(process.env.COINS_ON_7)
              : promo.count >= 30
              ? parseInt(process.env.COINS_ON_30)
              : promo.count >= 183
              ? parseInt(process.env.COINS_ON_183)
              : promo.count >= 365
              ? parseInt(process.env.COINS_ON_365)
              : 0;

          await utils.updateUserData(ctx.from.id,"rolls",user.rolls + rollsToAdd);
          await utils.updateUserData(ctx.from.id,"coins",user.coins + coinsToAdd);
        }

        let txt = "–£—Å–ø–µ—Ö!\n";
        let txtType = "";
        switch (promo.type) {
          case "coins":
            txtType = await utils.getDeclension(
              promo.count,
              "–º–æ–Ω–µ—Ç–∫—É",
              "–º–æ–Ω–µ—Ç–∫–∏",
              "–º–æ–Ω–µ—Ç–æ–∫"
            );
            break;
          case "gems":
            txtType = await utils.getDeclension(
              promo.count,
              "–ø–∞–∫–µ—Ç –ø–æ 60 –≥–µ–º–æ–≤",
              "–ø–∞–∫–µ—Ç–∞ –ø–æ 60 –≥–µ–º–æ–≤",
              "–ø–∞–∫–µ—Ç–æ–≤ –ø–æ 60 –≥–µ–º–æ–≤"
            );
            break;
          case "rolls":
            txtType = await utils.getDeclension(
              promo.count,
              "–±—Ä–æ—Å–æ–∫",
              "–±—Ä–æ—Å–∫–∞",
              "–±—Ä–æ—Å–∫–æ–≤"
            );
            break;
          case "items":
            txtType = await utils.getDeclension(
              promo.count,
              "–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –ª—É–Ω—ã",
              "–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –ª—É–Ω—ã",
              "–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –ø–æ–ª–Ω–æ–π –ª—É–Ω—ã"
            );
            break;
          case "vip_status":
            txtType = await utils.getDeclension(
              promo.count,
              "–¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏",
              "–¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏",
              "–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"
            );
            break;
          default:
            txtType = await getDeclension(
              promo.count,
              "–º–æ–Ω–µ—Ç–∫—É",
              "–º–æ–Ω–µ—Ç–∫–∏",
              "–º–æ–Ω–µ—Ç–æ–∫"
            );
            break;
        }
        txt += `–ó–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ –º—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ —Ç–µ–±–µ: ${promo.count} ${txtType}`;
        await ctx.reply(txt, kb.promocodes_start);
        return ctx.wizard.next();
      } else {
        await back(ctx);
      }
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  },

  async (ctx) => {
    try {
      cb_data = ctx.callbackQuery.data || null;

      if (cb_data === "try_again") {
        ctx.scene.reenter();
      } else {
        await back(ctx);
      }
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  }
);

module.exports = wizard_scenes;
