const { Scenes } = require("telegraf");
const kb = require("../../../../keyboars.json");
const utils = require("../../../../utils");

const back = async (ctx, edit = true) => {
  try {
    const userStartCoins = ctx.wizard.state.start_coins;
    ctx.wizard.state.start_coins = null;

    await ctx.scene.leave();

    let user = await utils.getUserData(ctx.chat.id);
    if(!user) {
        await utils.createUser(ctx.from.id, ctx.from.first_name);
        user = await utils.getUserData(ctx.from.id);
    }
    let stat = await utils.getUserStats(ctx.chat.id);
    if(!stat) {
        await utils.createUserStats(ctx.from.id);
        stat = await utils.getUserStats(ctx.chat.id);
    }
    let txt = "ü§´–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º - –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ F.A.Q.\n\n";
    txt += "–ó–¥–µ—Å—å –∫–µ–π—Å—ã –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ –≤—ã–±–æ—Ä\n\n";
    txt += "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–æ–≤ üí∞:\n";
    txt += "‚ñ´Ô∏è NT (Nothing Team) –ö–µ–π—Å: 10 üí∞\n";
    txt += "‚ñ´Ô∏è –ö–µ–π—Å –∑–∞ –¥—Ä—É–∑–µ–π: 10 üí∞\n";
    txt += "‚ñ´Ô∏è –†—É–ª–µ—Ç–∫–∞: 100 üí∞\n";
    txt += "‚ñ´Ô∏è –ö–µ–π—Å –ü–µ–ø—Å—ã: 300 üí∞\n";
    txt += "‚ñ´Ô∏è HIGH RISK: 100 üí∞\n";
    txt += "‚ñ´Ô∏è HIGH RISK Premium: 1000 üí∞\n";
    txt += "‚ñ´Ô∏è –°–î (—Å—á–∞—Å—Ç–ª–∏–≤—ã–π –¥—Ä–æ–ø): 6000 üí∞\n";
    txt += "‚ñ´Ô∏è –°–î –ø—Ä–µ–º–∏—É–º: 20000 üí∞\n";
    txt += "‚ñ´Ô∏è –í–æ–∑–≤—ã—à–µ–Ω–∏–µ: 0 üí∞\n\n";
    txt += `–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ: ${
      stat?.cases_opened ? stat.cases_opened : 0
    }üß®\n`;
    txt += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.coins} üí∞(${
      userStartCoins > user.coins ? "-" : "+"
    }${
      userStartCoins > user.coins
        ? userStartCoins - user.coins
        : user.coins - userStartCoins
    })\n`;

    if (edit) {
      try {
        await ctx.editMessageText(txt, kb.cases_menu);
      } catch (e) {}
    } else {
      await ctx.reply(txt, kb.cases_menu);
    }
  } catch (e) {
    console.log(e);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
    );
  }
};

const wizard_scenes = new Scenes.WizardScene(
  "pepsa_case",
  async (ctx) => {
    try {
      const user = await utils.getUserData(ctx.chat.id);
      let txt = "–í—Å–µ–≥–¥–∞ —Ö–æ—Ç–µ–ª —É–≤–∏–¥–µ—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É?üòâ\n\n";
      txt += `${ctx.chat.username}, –∫–∏–¥–∞–π –∫—É–±–∏–∫ - —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ç–µ–±—è! ‚ö°Ô∏è\n\n`;
      txt += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.coins} üí∞`;

      const mes = await ctx.reply(txt, kb.pepsa_case_start);
      await ctx.answerCbQuery();

      ctx.wizard.state.start_coins = user.coins;
      ctx.wizard.state.mid = mes.message_id;

      return ctx.wizard.next();
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  },

  async (ctx) => {
    try {
      const cb_data = ctx.callbackQuery?.data;

      if (cb_data && cb_data === "drop_pepsa") {
        const dropping = await dropCase(ctx)
        if(dropping)
          return ctx.wizard.next();
      } else {
        await back(ctx);
      }
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  },

  async (ctx) => {
    try {
      const cb_data = ctx.callbackQuery?.data;

      if (cb_data === "try_again") {
        await dropCase(ctx)
      } else {
        await back(ctx);
      }
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  }
);

async function dropCase(ctx) {
  const user = await utils.getUserData(ctx.from.id);
  const cost = user.vip_status > 0 ? 150 : 300;
  if (user.coins < cost) {
    await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç");
    await back(ctx, true);
    return false;
  }
  const diceResult = await ctx.replyWithDice();
  const selectedResult = diceResult.dice.value;
  const rewards = {
    1: { name: "5 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 5 },
    2: { name: "25 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 25 },
    3: { name: "50 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 50 },
    4: { name: "75 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 75 },
    5: { name: "100 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 100 },
    6: { name: "60 –≥–µ–º–æ–≤ üíé", type: "gems", amount: 1 },
  };
  await ctx.answerCbQuery();
  user.coins = user.coins - cost;
  await utils.updateUserData(ctx.chat.id, "coins", user.coins );
  await new Promise((resolve) => setTimeout(resolve, 5000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 —Å–µ–∫—É–Ω–¥

  ctx.deleteMessage(ctx.wizard.state.mid);
  utils.increaseUserCaseOpened(ctx.chat.id);

  const rewardInfo = rewards[selectedResult];

  if (rewardInfo.type === "gems") {
    user.gems += rewardInfo.amount;
    await utils.updateUserData(ctx.from.id, "gems", user.gems);
  } else if (rewardInfo.type === "coins") {
    user.coins += rewardInfo.amount;
    await utils.updateUserData(ctx.from.id, "coins", user.coins);
  }


  let txt = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–±–µ –≤—ã–ø–∞–ª–æ: ${rewardInfo.name}\n`;
  txt += "–ü—Ä–µ–¥–º–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É —Ç–µ–±—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.\n\n";
  txt +=
    "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å 60 –≥–µ–º–æ–≤ - –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–∑–≤—ã—à–µ–Ω–∏–µ –¥–æ –ª—É–Ω—ã!\n\n";
  txt += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.coins - cost} üí∞`;
  await ctx.reply(txt, kb.back_try_again_cases_menu);
  return true;
}

module.exports = wizard_scenes;
