const { Scenes } = require('telegraf')
const kb = require('../../../../keyboars.json')
const utils = require('../../../../utils')

const back = async (ctx, edit = true) => {
    try {
        await ctx.scene.leave()
        const stat = await utils.getUserStats(ctx.from.id)

        let txt = 'ü§´–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º - –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ F.A.Q.\n\n'
        txt += '–ó–¥–µ—Å—å –∫–µ–π—Å—ã –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ –≤—ã–±–æ—Ä\n'
        txt += '–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –∑–∞ –∫–µ–π—Å –≤ üí∞\n\n'
        txt += `–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ: ${stat.cases_opened}`
        
        if (edit) {
            try {
                await ctx.editMessageText(txt, kb.cases_menu);
            } catch (e) {

            }
        } else {
            await ctx.reply(txt, kb.cases_menu);
        }
    } catch (e) {
        console.log(e)
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot')
    }
}

const wizard_scenes = new Scenes.WizardScene(
    "elevation",
    async (ctx) => {
        try {
            const user = await utils.getUserData(ctx.from.id)
            
            if (user.gems > 0 && user.coins >= 49) {
                let txt = '–ß—Ç–æ–∂, 60 –≥–µ–º–æ–≤ - —Ç–æ–∂–µ –≥–µ–º—ã, –Ω–æ —Ç—ã —Å —ç—Ç–∏–º –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω?\n\n'
                txt += '–¢–æ–≥–¥–∞ –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –º–∞–≥–∏–∏..'
                try {
                    await ctx.editMessageText(txt, kb.high_risk_start)
                } catch (e) {
                    
                }
                return ctx.wizard.next()
            } else {
                let txt = `–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –∏–ª–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç 60 –≥–µ–º–æ–≤`
                try {
                    await ctx.editMessageText(txt, kb.back_cases_menu)
                } catch (e) {
                    
                }
                return ctx.wizard.next()
            }
        }catch (e) {
            console.log(e)
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot')
            await back(ctx, false)
        }
    },

    async (ctx) => {
        try {
            const user = await utils.getUserData(ctx.from.id)
            const cb_data = ctx.callbackQuery.data
            

            if (cb_data === 'start_case') {
                
                await utils.updateUserData(ctx.from.id, 'gems', user.gems - 1);
                await utils.updateUserData(ctx.from.id, 'coins', user.coins - 49);

                const possRes = [
                        { result: '–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –ø–æ–ª–æ–π –ª—É–Ω—ã üåô', chance: 20 }, 
                        { result: 'lose', chance: 80 }, 
                ]

                await utils.increaseUserCaseOpened(ctx.from.id)

                const result = await utils.getRandomResult(possRes);
                if (result.result == 'lose') {
                        let txt = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–∏ üíé —Å–≥–æ—Ä–µ–ª–∏.\n\n'
                        txt += '–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?'
                        try {
                            await ctx.editMessageText(txt, kb.back_try_again_cases_menu)
                        } catch (e) {
                    
                        }
                        return ctx.wizard.next()
                } else {
                        await utils.updateUserData(ctx.from.id, 'items', user.items + 1); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

                        let txt = '–£—Å–ø–µ—Ö! –ú–∏—Å—Å —É–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è —è–≤–Ω–æ –ª—é–±–∏—Ç —Ç–µ–±—è!\n\n'
                        txt += "–ü–æ–º–µ—Å—Ç–∏–ª–∏ üåô  —Ç–µ–±–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"
                        try {
                            await ctx.editMessageText(txt, kb.back_try_again_cases_menu);
                        }catch (e) {

                        }
                        return ctx.wizard.next()
                }

            } else {
                await back(ctx)
            }
        }catch (e) {
            console.log(e)
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot')
            await back(ctx, false)
        }
        
    },

    async (ctx) => {
        try {
            const user = await utils.getUserData(ctx.from.id)
            cb_data = ctx.callbackQuery.data

            if ( (cb_data === 'try_again')) {
                ctx.scene.reenter()
            } else {
                await back(ctx)
            }
        }catch (e) {
            console.log(e)
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot')
            await back(ctx, false)
        }
    }

) 

module.exports = wizard_scenes