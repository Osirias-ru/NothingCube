const { Scenes } = require("telegraf");
const kb = require("../../../../keyboars.json");
const utils = require("../../../../utils");

const back = async (ctx, edit = true) => {
  try {
    const userStartCoins = ctx.wizard.state.start_coins;
    ctx.wizard.state.start_coins = null;

    await ctx.scene.leave();

    let user = await utils.getUserData(ctx.chat.id);
    if(!user) {
        await utils.createUser(ctx.from.id, ctx.from.first_name);
        user = await utils.getUserData(ctx.from.id);
    }
    let stat = await utils.getUserStats(ctx.chat.id);
    if(!stat) {
        await utils.createUserStats(ctx.from.id);
        stat = await utils.getUserStats(ctx.chat.id);
    }
    let txt = "ü§´–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º - –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ F.A.Q.\n\n";
    txt += "–ó–¥–µ—Å—å –∫–µ–π—Å—ã –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ –≤—ã–±–æ—Ä\n\n";
    txt += "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–æ–≤ üí∞:\n";
    txt += "‚ñ´Ô∏è NT (Nothing Team) –ö–µ–π—Å: 10 üí∞\n";
    txt += "‚ñ´Ô∏è –ö–µ–π—Å –∑–∞ –¥—Ä—É–∑–µ–π: 10 üí∞\n";
    txt += "‚ñ´Ô∏è –†—É–ª–µ—Ç–∫–∞: 100 üí∞\n";
    txt += "‚ñ´Ô∏è –ö–µ–π—Å –ü–µ–ø—Å—ã: 300 üí∞\n";
    txt += "‚ñ´Ô∏è HIGH RISK: 100 üí∞\n";
    txt += "‚ñ´Ô∏è HIGH RISK Premium: 1000 üí∞\n";
    txt += "‚ñ´Ô∏è –°–î (—Å—á–∞—Å—Ç–ª–∏–≤—ã–π –¥—Ä–æ–ø): 6000 üí∞\n";
    txt += "‚ñ´Ô∏è –°–î –ø—Ä–µ–º–∏—É–º: 20000 üí∞\n";
    txt += "‚ñ´Ô∏è –í–æ–∑–≤—ã—à–µ–Ω–∏–µ: 0 üí∞\n\n";
    txt += `–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ: ${
      stat?.cases_opened ? stat.cases_opened : 0
    }üß®\n`;
    txt += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.coins} üí∞(${
      userStartCoins > user.coins ? "-" : "+"
    }${
      userStartCoins > user.coins
        ? userStartCoins - user.coins
        : user.coins - userStartCoins
    })\n`;

    if (edit) {
      try {
        await ctx.editMessageText(txt, kb.cases_menu);
      } catch (e) {}
    } else {
      await ctx.reply(txt, kb.cases_menu);
    }
  } catch (e) {
    console.log(e);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
    );
  }
};

const wizard_scenes = new Scenes.WizardScene(
  "nt_case",
  async (ctx) => {
    try {
      const user = await utils.getUserData(ctx.chat.id);

      let txt = "–≠—Ç–æ –∫–µ–π—Å –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã Nothing Team!\n";
      txt += "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å 1000 üí∞ !\n\n";
      txt += `–ù–æ –µ—Å—Ç—å –æ–¥–Ω–æ –Ω–æ.. –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤—Å–µ–≥–æ 1%\n`;
      txt += "–£–¥–∞—á–∏ üçÄ\n\n";
      txt += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.coins} üí∞`;

      await ctx.reply(txt, kb.nt_case_start);
      await ctx.answerCbQuery();

      ctx.wizard.state.start_coins = user.coins;

      return ctx.wizard.next();
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  },

  async (ctx) => {
    try {
      const cb_data = ctx.callbackQuery?.data;

      if (cb_data === "start_case") {
        const dropping = await dropCase(ctx);
        if (dropping) return ctx.wizard.next();
      } else {
        await back(ctx);
      }
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  },

  async (ctx) => {
    try {
      cb_data = ctx.callbackQuery?.data;

      if (cb_data === "try_again") {
        await dropCase(ctx);
      } else {
        await back(ctx);
      }
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  }
);

async function dropCase(ctx) {
  const user = await utils.getUserData(ctx.from.id);
  const cost = user.vip_status > 0 ? 5 : 10;

  if (user.coins >= cost) {
    const updatedCoins = user.coins - cost;
    await utils.updateUserData(ctx.chat.id, "coins", updatedCoins);

    const possRes = [
      { result: "1000 –º–æ–Ω–µ—Ç", chance: 0.1 },
      { result: "lose", chance: 99.9 },
    ];
    await utils.increaseUserCaseOpened(ctx.chat.id);
    const result = await utils.getRandomResult(possRes);

    if (result.result == "lose") {
      let txt = "–£–≤—ã, —Ç–µ–±–µ –¥–æ—Å—Ç–∞–ª–æ—Å—å Nothing..\n";
      txt += "–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?üòâ";
      try {
        await ctx.reply(txt, kb.back_try_again_cases_menu);
        await ctx.answerCbQuery();
      } catch (e) {}
      return true;
    } else {
      await utils.updateUserData(ctx.chat.id, "coins", user.coins + 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

      let txt = "–°–µ–≥–æ–¥–Ω—è –≤–∞–º –≤—ã–ø–∞–ª–æ –±–ª–∞–≥–æ—Å–ª–∞–≤–µ–Ω–∏–µ –ò–≥–æ—Ä—è –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1000 üí∞";
      try {
        await ctx.reply(txt, kb.back_try_again_cases_menu);
        await ctx.answerCbQuery();
        return true;
      } catch (e) {}
    }
  } else {
    await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç");
    await back(ctx, true);
    return false;
  }
}

module.exports = wizard_scenes;
