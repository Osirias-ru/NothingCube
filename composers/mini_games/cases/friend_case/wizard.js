const { Scenes } = require("telegraf");
const kb = require("../../../../keyboars.json");
const utils = require("../../../../utils");

const back = async (ctx, edit = true) => {
  try {
    const userStartCoins = ctx.wizard.state.start_coins;
    ctx.wizard.state.start_coins = null;

    await ctx.scene.leave();

    let user = await utils.getUserData(ctx.chat.id);
    if(!user) {
        await utils.createUser(ctx.from.id, ctx.from.first_name);
        user = await utils.getUserData(ctx.from.id);
    }
    let stat = await utils.getUserStats(ctx.chat.id);
    if(!stat) {
        await utils.createUserStats(ctx.from.id);
        stat = await utils.getUserStats(ctx.chat.id);
    }
    let txt = "ü§´–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º - –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ F.A.Q.\n\n";
    txt += "–ó–¥–µ—Å—å –∫–µ–π—Å—ã –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ –≤—ã–±–æ—Ä\n\n";
    txt += "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–æ–≤ üí∞:\n";
    txt += "‚ñ´Ô∏è NT (Nothing Team) –ö–µ–π—Å: 10 üí∞\n";
    txt += "‚ñ´Ô∏è –ö–µ–π—Å –∑–∞ –¥—Ä—É–∑–µ–π: 10 üí∞\n";
    txt += "‚ñ´Ô∏è –†—É–ª–µ—Ç–∫–∞: 100 üí∞\n";
    txt += "‚ñ´Ô∏è –ö–µ–π—Å –ü–µ–ø—Å—ã: 300 üí∞\n";
    txt += "‚ñ´Ô∏è HIGH RISK: 100 üí∞\n";
    txt += "‚ñ´Ô∏è HIGH RISK Premium: 1000 üí∞\n";
    txt += "‚ñ´Ô∏è –°–î (—Å—á–∞—Å—Ç–ª–∏–≤—ã–π –¥—Ä–æ–ø): 6000 üí∞\n";
    txt += "‚ñ´Ô∏è –°–î –ø—Ä–µ–º–∏—É–º: 20000 üí∞\n";
    txt += "‚ñ´Ô∏è –í–æ–∑–≤—ã—à–µ–Ω–∏–µ: 0 üí∞\n\n";
    txt += `–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ: ${
      stat?.cases_opened ? stat.cases_opened : 0
    }üß®\n`;
    txt += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.coins} üí∞(${
      userStartCoins > user.coins ? "-" : "+"
    }${
      userStartCoins > user.coins
        ? userStartCoins - user.coins
        : user.coins - userStartCoins
    })\n`;

    if (edit) {
      try {
        await ctx.editMessageText(txt, kb.cases_menu);
      } catch (e) {}
    } else {
      await ctx.reply(txt, kb.cases_menu);
    }
  } catch (e) {
    console.log(e);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
    );
  }
};

const wizard_scenes = new Scenes.WizardScene(
  "friend_case",
  async (ctx) => {
    try {
      const user = await utils.getUserData(ctx.chat.id);

      let txt = "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏ –∑–∞ –¥—Ä—É–∑–µ–π!\n";
      txt += `–ü—Ä–∏–≤–æ–¥–∏ 10 –¥—Ä—É–∑–µ–π –∏ –æ—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å!\n\n`;
      txt += `–ö–∏–¥–∞–π –∫—É–±–∏–∫, —ç—Ç–æ—Ç –∫–µ–π—Å –¥–ª—è —Ç–µ–±—è‚ö°Ô∏è`;

      const mes = await ctx.reply(txt, kb.friend_case_start);
      await ctx.answerCbQuery();

      ctx.wizard.state.start_coins = user.coins;
      ctx.wizard.state.mid = mes.message_id;

      return ctx.wizard.next();
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  },

  async (ctx) => {
    try {
      const cb_data = ctx.callbackQuery?.data;

      if (cb_data && cb_data === "drop_friend") {
        const dropping = await dropCase(ctx);
        if (dropping) return ctx.wizard.next();
      } else {
        await back(ctx);
      }
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  },

  async (ctx) => {
    try {
      const cb_data = ctx.callbackQuery?.data;

      if (cb_data === "try_again") {
        await dropCase(ctx);
      } else {
        await back(ctx);
      }
    } catch (e) {
      console.log(e);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot"
      );
      await back(ctx, false);
    }
  }
);

async function dropCase(ctx) {
  const user = await utils.getUserData(ctx.chat.id);
  const cost = user.vip_status > 0 ? 5 : 10;
  if (user.coins < cost) {
    await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç");
    await back(ctx, true);
    return false;
  }

  if (user.friend_coin < 10) {
    await ctx.answerCbQuery("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤");
    await back(ctx, true);
    return  false;
  }
  user.coins = user.coins - cost;
  user.friend_coin = user.friend_coin - 10;

  const diceResult = await ctx.replyWithDice();
  const selectedResult = diceResult.dice.value;

  const rewards = {
    1: { name: "10 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 10 },
    2: { name: "30 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 30 },
    3: { name: "100 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 100 },
    4: { name: "200 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 200 },
    5: { name: "500 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 500 },
    6: { name: "1000 –º–æ–Ω–µ—Ç üí∞", type: "coins", amount: 1000 },
  };

  await utils.updateUserData(ctx.chat.id, "coins", user.coins);
  await utils.updateUserData(ctx.chat.id, "friend_coin", user.friend_coin);
  utils.increaseUserCaseOpened(ctx.chat.id);

  await ctx.answerCbQuery();
  await new Promise((resolve) => setTimeout(resolve, 5000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 —Å–µ–∫—É–Ω–¥

  ctx.deleteMessage(ctx.wizard.state.mid);

  const rewardInfo = rewards[selectedResult];

  if (rewardInfo.type === "coins") {
    await utils.updateUserData(
      ctx.chat.id,
      "coins",
      user.coins + rewardInfo.amount
    );
  }

  let txt = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–±–µ –≤—ã–ø–∞–ª–æ: ${rewardInfo.name}\n`;
  txt += `–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.coins + rewardInfo.amount} üí∞`;

  await ctx.reply(txt, kb.back_try_again_cases_menu);
  return true;
}

module.exports = wizard_scenes;
