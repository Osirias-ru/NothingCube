const { Scenes, Markup } = require('telegraf');
const kb = require('../../../../keyboars.json')
const utils = require('../../../../utils');

const back = async (ctx, edit = true) => {
  try {
    await ctx.scene.leave()
    const stat = await utils.getUserStats(ctx.chat.id)

    let txt = 'ü§´–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º - –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ F.A.Q.\n\n'
    txt += '–ó–¥–µ—Å—å –∫–µ–π—Å—ã –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ –≤—ã–±–æ—Ä\n'
    txt += '–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –∑–∞ –∫–µ–π—Å –≤ üí∞\n\n'
    txt += `–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ: ${stat.cases_opened}`

    if (edit) {
      try {
        await ctx.editMessageText(txt, kb.cases_menu);
      } catch (e) {

      }
    } else {
      await ctx.reply(txt, kb.cases_menu);
    }
  } catch (e) {
    console.log(e)
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot')

  }
}

const russianRouletteScene = new Scenes.WizardScene(
  "russian_roulette",
  async (ctx) => {
    await ctx.reply('–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É "–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞" –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥?', Markup.inlineKeyboard([
      Markup.button.callback('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', 'start_game'),
      Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', 'cases_menu')
    ]));
    return ctx.wizard.next();
  },

  async (ctx) => {
    const user = await utils.getUserData(ctx.chat.id);
    if (user.coins < 100) {
      await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã.');
      return ctx.scene.leave();
    }
    await utils.updateUserData(ctx.chat.id, 'coins', user.coins - 100);

    ctx.wizard.state.attempts = 0;
    await ctx.reply('–ò–≥—Ä–∞ "–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞" –Ω–∞—á–∞–ª–∞—Å—å. –ù–∞–∂–º–∏—Ç–µ "–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å" –¥–ª—è –Ω–∞—á–∞–ª–∞.', Markup.inlineKeyboard([
      Markup.button.callback('–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å', 'shoot')
    ]));
    return ctx.wizard.next();
  },

  async (ctx) => {
    const lossChances = [16, 32, 48, 64];
    const attempt = ctx.wizard.state.attempts;
    const isLost = Math.random() * 100 < lossChances[attempt];

    if (isLost) {
      await ctx.replyWithSticker('CAACAgIAAxkBAAELkQtl3g8BQCI1NB1Y4O7QrcwyI30nLAACGi0AAiEL6ElPYSE3ilVrDTQE'); // ID —Å—Ç–∏–∫–µ—Ä–∞
      setTimeout(async () => {
        await ctx.deleteMessage();
        await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
      }, 4000);
      return ctx.scene.leave();
    }

    ctx.wizard.state.attempts += 1;

    if (ctx.wizard.state.attempts < 3) {
      await ctx.reply(`–í—ã –≤—ã–∂–∏–ª–∏! –ü–æ–ø—ã—Ç–∫–∞ ${ctx.wizard.state.attempts + 1}. –ù–∞–∂–º–∏—Ç–µ "–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`, Markup.inlineKeyboard([
        Markup.button.callback('–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å', 'shoot')
      ]));
      return;
    } else if (ctx.wizard.state.attempts === 3) {
      await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∂–∏–ª–∏! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å 200 –º–æ–Ω–µ—Ç–æ–∫ –∏–ª–∏ —Ä–∏—Å–∫–Ω—É—Ç—å —Å —á–µ—Ç–≤–µ—Ä—Ç—ã–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º –∑–∞ 400 –º–æ–Ω–µ—Ç–æ–∫.', Markup.inlineKeyboard([
        Markup.button.callback('–ó–∞–±—Ä–∞—Ç—å 200 –º–æ–Ω–µ—Ç–æ–∫', 'take_200'),
        Markup.button.callback('–†–∏—Å–∫–Ω—É—Ç—å', 'shoot')
      ]));
      return;
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª 400 –º–æ–Ω–µ—Ç–æ–∫
      const user = await utils.getUserData(ctx.chat.id);
      await utils.updateUserData(ctx.chat.id, 'coins', user.coins + 400);
      await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 400 –º–æ–Ω–µ—Ç–æ–∫!');
      return ctx.scene.leave();
    }
  },

  async (ctx) => {
    try {
      cb_data = ctx.callbackQuery?.data
  
      if ((cb_data === 'try_again')) {
        ctx.scene.reenter()
      } else {
        await back(ctx)
      }
    } catch (e) {
      console.log(e)
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ @GameNothingsupport_bot')
      await back(ctx, false)
    }
  }
);

russianRouletteScene.action('shoot', (ctx) => ctx.wizard.steps[1](ctx));
russianRouletteScene.action('take_200', async (ctx) => {
  const user = await utils.getUserData(ctx.chat.id);
  await utils.updateUserData(ctx.chat.id, 'coins', user.coins + 200);
  await ctx.reply('–í—ã –∑–∞–±—Ä–∞–ª–∏ 200 –º–æ–Ω–µ—Ç–æ–∫!');
  ctx.scene.leave();
});

module.exports = russianRouletteScene;