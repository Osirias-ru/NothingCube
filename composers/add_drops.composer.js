const { Composer } = require("telegraf");
const kb = require("../keyboars.json");
const utils = require("../utils");

async function createAddDropsKeyboard(requiredChannels) {
  const buttonsPerRow = 3;
  const inlineKeyboard = [];

  for (let i = 0; i < requiredChannels.length; i += buttonsPerRow) {
    const row = requiredChannels.slice(i, i + buttonsPerRow).map((channel) => ({
      text: channel.name,
      url: channel.url,
    }));
    inlineKeyboard.push(row);
  }

  inlineKeyboard.push([
    { text: "‚ûï –°–æ–±—Ä–∞—Ç—å –±—Ä–æ—Å–∫–∏", callback_data: "check_check_subscription" },
    { text: "üè† –î–æ–º–æ–π", callback_data: "back_to_menu" },
  ]);

  return {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  };
}

const composer = new Composer();

composer.action("add_drops", async (ctx) => {
  try {
    const requiredChannels = await utils.getNewRollsChannels();
    const keyboard = await createAddDropsKeyboard(requiredChannels);
    const text =
      "–ó–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤. ‚úçÔ∏è\n–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª, –¥–∞—ë—Ç –æ–¥–∏–Ω üéØ –î–æ–ø. –ë—Ä–æ—Å–æ–∫";
    await ctx.editMessageText(text, keyboard);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
  }
});

composer.action("check_check_subscription", async (ctx) => {
  try {
    const requiredChannels = await utils.getNewRollsChannels();

    const userId = ctx.chat.id;
    const user = await utils.getUserData(userId);
    const currentSubscriptions = user.subscribe_at; //–¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentSubscriptionsCount = currentSubscriptions.filter(value => value === true).length;
    const alreadySubs = currentSubscriptions.slice();
    const userSubscribed = await utils.checkUserSubscriptions(userId, requiredChannels, alreadySubs); //–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const userSubscribedCount = userSubscribed.filter(value => value === true).length;

    const keyboard = await createAddDropsKeyboard(requiredChannels);


    if (userSubscribedCount) {
      //–ü–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —Ö–æ—Ç—å –Ω–∞ –∫–æ–≥–æ —Ç–æ
      if (requiredChannels.length > currentSubscriptionsCount) {
        //–ü–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –Ω–∞ –≤—Å–µ—Ö
        const addRolls = userSubscribedCount - currentSubscriptionsCount; //–°–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        if (addRolls === 0) {
          //–ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç
          return await ctx.editMessageText(
            `–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –±—Ä–æ—Å–∫–æ–≤!\n–°–µ–π—á–∞—Å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ ${currentSubscriptionsCount} –∫–∞–Ω–∞–ª–æ–≤`,
            keyboard
          );
        }

        const newRolls = user.rolls + addRolls;
        await utils.updateUserData(userId, "rolls", newRolls); //–û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await utils.updateUserData(userId, "subscribe_at", JSON.stringify(userSubscribed)); //–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        const text = `–£—Å–ø–µ—à–Ω–æ! –ú—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ —Ç–µ–±–µ ${addRolls} –±—Ä–æ—Å–∫–æ–≤!\n\n–°–∫–æ—Ä–µ–µ –∫–∏–¥–∞–π –∫—É–±–∏–∫ üé≤, –ø–æ—Ç–æ–º—É —á—Ç–æ –±—Ä–æ—Å–∫–∏ –Ω–µ–ª—å–∑—è –Ω–∞–∫–æ–ø–∏—Ç—å!`;
        await ctx.editMessageText(text, kb.add_tryes_success);
      } else {
        //–ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ—Ö
        return await ctx.editMessageText(
          "–í—ã —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –±—Ä–æ—Å–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞‚ù§Ô∏è",
          kb.back_add_tryes
        );
      }
    } else {
      //–ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ –∫–æ–≥–æ
      const text =
        "–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ :(\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!";
      return await ctx.editMessageText(text, kb.back_add_tryes);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
  }
});

module.exports = composer;
